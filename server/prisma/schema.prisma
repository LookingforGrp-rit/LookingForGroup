generator client {
  provider = "prisma-client-js"
  output   = "../src/models/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Mediums {
  mediumId        Int        @id @default(autoincrement()) @map("medium_id")
  label           String     @unique @db.VarChar(50)
  projects        Projects[]
  
  @@map("mediums")
}

model Roles {
  roleId  Int       @id     @default(autoincrement()) @map("title_id")
  label   String    @unique @db.VarChar(50)
  jobs    Jobs[]
  members Members[]

  @@map("roles")
}

model Jobs {
  projectId    Int              @map("project_id")
  roleId       Int              @map("title_id")
  availability JobsAvailability
  duration     JobsDuration
  location     JobsLocation
  compensation JobsCompensation
  description  String?          @db.VarChar(500)
  createdAt    DateTime         @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt    DateTime         @default(now()) @map("updated_at") @db.Timestamp(0)
  projects     Projects         @relation(fields: [projectId], references: [projectId], onDelete: Cascade, map: "FK2_project_id")
  roles        Roles            @relation(fields: [roleId], references: [roleId], map: "FK_jobs_job_titles")

  @@id([projectId, roleId])
  @@index([projectId], map: "FK2_project_id")
  @@index([roleId], map: "FK_jobs_job_titles")
  @@map("jobs")
}

model Majors {
  majorId Int     @id     @default(autoincrement()) @map("major_id")
  label   String  @unique @db.VarChar(100)
  users   Users[]

  @@map("majors")
}

model Members {
  projectId         Int                      @map("project_id")
  userId            Int                      @map("user_id")
  roleId            Int                      @map("title_id")
  profileVisibility MembersProfileVisibility @default(public) @map("profile_visibility")
  createdAt         DateTime                 @default(now()) @map("created_at") @db.Timestamp(0)
  roles             Roles                    @relation(fields: [roleId], references: [roleId], map: "FK_members_job_titles")
  projects          Projects                 @relation(fields: [projectId], references: [projectId], onDelete: Cascade, map: "FK_members_projects")
  users             Users                    @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "FK_members_users")

  @@id([projectId, userId])
  @@index([roleId], map: "FK_members_job_titles")
  @@index([userId], map: "FK_members_users")
  @@map("members")
}

model ProjectFollowings {
  userId     Int      @map("user_id")
  projectId  Int      @map("project_id")
  followedAt DateTime @default(now()) @map("followed_at") @db.Timestamp(0)
  projects   Projects @relation(fields: [projectId], references: [projectId], onDelete: Cascade, map: "FK_project_followings_projects")
  users      Users    @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "FK_project_followings_users")

  @@id([userId, projectId])
  @@index([projectId], map: "FK_project_followings_projects")
  @@index([userId], map: "FK_project_followings_users")
  @@map("project_followings")
}

model ProjectImages {
  imageId   Int      @id @default(autoincrement()) @map("image_id")
  image     String   @db.VarChar(100)
  altText   String   @db.VarChar(150)
  position  Int
  projectId Int      @map("project_id")
  projects  Projects @relation(fields: [projectId], references: [projectId], onDelete: Cascade, map: "FK_project_images_projects")

  @@index([projectId], map: "FK_project_images_projects")
  @@map("project_images")
}

model ProjectSocials {
  projectId Int      @map("project_id")
  websiteId Int      @map("website_id")
  url       String   @db.VarChar(2000)
  projects  Projects @relation(fields: [projectId], references: [projectId], onDelete: Cascade, map: "FK_project_socials_projects")
  socials   Socials  @relation(fields: [websiteId], references: [websiteId], map: "FK_project_socials_socials")
  
  @@id([projectId, websiteId])
  @@index([websiteId], map: "FK_project_socials_socials")
  @@map("project_socials")
}

model Projects {
  projectId         Int                 @id @default(autoincrement()) @map("project_id")
  title             String              @db.VarChar(150)
  hook              String              @db.VarChar(200)
  description       String              @db.VarChar(2000)
  thumbnail         String?             @db.VarChar(100)
  purpose           ProjectsPurpose?
  status            ProjectsStatus
  audience          String?             @db.VarChar(300)
  userId            Int                 @map("user_id")
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt         DateTime            @default(now()) @map("updated_at") @db.Timestamp(0)
  jobs              Jobs[]
  members           Members[]
  projectFollowings ProjectFollowings[]
  projectImages     ProjectImages[]
  projectSocials    ProjectSocials[]
  mediums           Mediums[]
  tags              Tags[]
  users             Users               @relation(fields: [userId], references: [userId], map: "FK_user_id")

  @@index([userId], map: "FK_user_id")
  @@map("projects")
}

model Socials {
  websiteId      Int              @id     @default(autoincrement()) @map("website_id")
  label          String           @unique @db.VarChar(50)
  projectSocials ProjectSocials[]
  userSocials    UserSocials[]

  @@map("socials")
}

model Tags {
  tagId    Int        @id @default(autoincrement()) @map("tag_id")
  label    String     @db.VarChar(50)
  type     String     @db.VarChar(50)
  projects Projects[]

  @@unique([label, type])
  @@map("tags")
}

model UserFollowings {
  senderId     Int      @map("sender_id")
  receiverId   Int      @map("receiver_id")
  followedAt   DateTime @default(now()) @map("followed_at") @db.Timestamp(0)
  senderUser   Users    @relation("sender_user", fields: [senderId], references: [userId], onDelete: Cascade, map: "FK_user_followings_sender")
  receiverUser Users    @relation("receiver_user", fields: [receiverId], references: [userId], onDelete: Cascade, map: "FK_user_followings_receiver")

  @@id([senderId, receiverId])
  @@index([senderId], map: "FK_user_followings_sender")
  @@index([receiverId], map: "FK_user_followings_receiver")
  @@map("user_followings")
}

model UserSkills {
  userId   Int    @map("user_id")
  skillId  Int    @map("skill_id")
  position Int
  skills   Skills @relation(fields: [skillId], references: [skillId], onDelete: NoAction, map: "FK_user_skills_skills")
  users    Users  @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "FK_user_skills_users")

  @@id([userId, skillId])
  @@index([skillId], map: "FK_user_skills_skills")
  @@index([userId], map: "FK_user_skills_users")
  @@map("user_skills")
}

model UserSocials {
  userId    Int     @map("user_id")
  websiteId Int     @map("website_id")
  url       String  @db.VarChar(2000)
  socials   Socials @relation(fields: [websiteId], references: [websiteId], map: "FK_user_socials_socials")
  users     Users   @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "FK_user_socials_users")

  @@id([userId, websiteId])
  @@index([websiteId], map: "FK_user_socials_socials")
  @@map("user_socials")
}

model Users {
  userId            Int                 @id @default(autoincrement()) @map("user_id")
  username          String              @unique @db.VarChar(50)
  ritEmail          String              @unique @map("rit_email") @db.VarChar(50)
  firstName         String              @map("first_name") @db.Text
  lastName          String              @map("last_name") @db.Text
  profileImage      String?             @map("profile_image") @db.VarChar(100)
  headline          String?             @db.VarChar(100)
  pronouns          String?             @db.Text
  title             String?             @db.VarChar(50)
  majorId           Int?                @map("major_id")
  academicYear      UsersAcademicYear?  @map("academic_year")
  location          String?             @db.VarChar(150)
  funFact           String?             @map("fun_fact") @db.VarChar(100)
  bio               String?             @db.VarChar(600)
  visibility        Int                 @default(1) @db.TinyInt
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt         DateTime            @default(now()) @map("updated_at") @db.Timestamp(0)
  phoneNumber       Int?                @unique @map("phone_number")
  universityId      String              @unique(map: "university_id_UNIQUE") @map("university_id") @db.VarChar(9)
  members           Members[]
  projectFollowings ProjectFollowings[]
  projects          Projects[]
  followers         UserFollowings[]    @relation("receiver_user")
  following         UserFollowings[]    @relation("sender_user")
  userSkills        UserSkills[]
  userSocials       UserSocials[]
  majors            Majors?             @relation(fields: [majorId], references: [majorId], onDelete: Restrict, map: "FK_users_majors")

  @@index([majorId], map: "FK_users_majors")
  @@map("users")
}

model Skills {
  skillId    Int          @id @default(autoincrement()) @map("skill_id")
  label      String       @db.VarChar(50)
  type       String       @db.VarChar(50)
  userSkills UserSkills[]

  @@unique([label, type])
  @@map("skills")
}

enum JobsAvailability {
  FullTime @map("Full-time")
  PartTime @map("Part-time")
  Flexible

  @@map("jobs_availability")
}

enum JobsDuration {
  ShortTerm @map("Short-term")
  LongTerm  @map("Long-term")

  @@map("jobs_duration")
}

enum JobsLocation {
  OnSite @map("On-site")
  Remote
  Hybrid

  @@map("jobs_location")
}

enum ProjectsPurpose {
  Personal
  PortfolioPiece @map("Portfolio Piece")
  Academic
  CoOp           @map("Co-op")

  @@map("projects_purpose")
}

enum JobsCompensation {
  Unpaid
  Paid

  @@map("jobs_compensation")
}

enum ProjectsStatus {
  Planning
  Development
  PostProduction @map("Post-Production")
  Complete

  @@map("projects_status")
}

enum MembersProfileVisibility {
  private
  public

  @@map("members_profile_visibility")
}

enum UsersAcademicYear {
  Freshman
  Sophomore
  Junior
  Senior
  Grad1
  Grad2

  @@map("users_academic_year")
}