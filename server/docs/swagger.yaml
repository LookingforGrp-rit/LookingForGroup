openapi: 3.0.3
info:
  title: Looking For Group API
  version: 1.0.0
  description: |
    LFG API Documentation. This will showcase all the endpoints available and how to use them.
    Note: When accessed directly from the express app, the endpoints will have an additional "/api" prefix.
    Because of this, please use the vite proxy when reviewing the docs.

# AUTHENTICATION
paths:
  /api/auth:
    get:
      summary: Check if user is authenticated
      tags:
        - Authentication
      responses:
        '200':
          description: Authentication status
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      authenticated:
                        type: boolean
                        enum: [true]
                      username:
                        type: string
                        description: Username of user
                    example:
                      authenticated: true
                      username: Mistah Bones
                  - type: object
                    properties:
                      authenticated:
                        type: boolean
                        enum: [false]
                      error:
                        type: string
                        description: Reason for no authentication
                      username:
                        type: string
                        description: Username of user
                    example:
                      authenticated: false
                      error: unauthorized
                      username: guest

  # DATASETS
  /api/datasets/job-titles:
    get:
      summary: Returns a list of all job titles
      tags:
        - Datasets
      responses:
        '200':
          description: List of all the job titles available
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobTitle'
              examples:
                default:
                  summary: Example job titles list
                  value:
                    - titleId: 1
                      label: Full-Stack Developer
                    - titleId: 2
                      label: Front-End Developer
                    - titleId: 3
                      label: Back-End Developer
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/datasets/socials:
    get:
      summary: Receives list of all socials
      tags:
        - Datasets
      responses:
        '200':
          description: A list of social platforms
          content:
            application/json:
              schema:
                type: object
                properties:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/Social'
              examples:
                default:
                  summary: Example socials list
                  value:
                    - websiteId: 1
                      label: Instagram
                    - websiteId: 2
                      label: Twitter
                    - websiteId: 3
                      label: Facebook
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/datasets/skills:
    get:
      summary: Receives list of all skills
      tags:
        - Datasets
      responses:
        '200':
          description: A list of skills
          content:
            application/json:
              schema:
                type: object
                properties:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/Skill'
              examples:
                default:
                  summary: Example skill list
                  value:
                    - skill_id: 1
                      label: C++
                      type: Developer
                    - skill_id: 2
                      label: CSS
                      type: Developer
                    - skill_id: 3
                      label: C#
                      type: Developer
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/datasets/project-types:
    get:
      summary: Receives list of all project types
      tags:
        - Datasets
      responses:
        '200':
          description: A list of project types
          content:
            application/json:
              schema:
                type: object
                properties:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProjectType'
              examples:
                default:
                  summary: Example project types list
                  value:
                    - typeId: 1
                      label: Video Game
                    - typeId: 2
                      label: Analog Game
                    - typeId: 3
                      label: Mobile Application
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/datasets/majors:
    get:
      summary: Receives list of all majors
      tags:
        - Datasets
      responses:
        '200':
          description: A list of majors
          content:
            application/json:
              schema:
                type: object
                properties:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/Major'
              examples:
                default:
                  summary: Examples majors list
                  value:
                    - majorId: 1
                      label: Animation
                    - majorId: 2
                      label: Computer Engineering
                    - majorId: 3
                      label: Computing Engineering Technology
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/datasets/tags:
    get:
      summary: Receives list of all tags
      tags:
        - Datasets
      responses:
        '200':
          description: A list of tags
          content:
            application/json:
              schema:
                type: object
                properties:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tag'
              examples:
                default:
                  summary: Example tags list
                  value:
                    - tagId: 1
                      label: Indie
                      type: Creative
                    - tagId: 2
                      label: Abstract
                      type: Creative
                    - tagId: 3
                      label: Horror
                      type: Creative
        '500':
          $ref: '#/components/responses/InternalServerError'

  # USERS
  /api/users/get-username-shib:
    get:
      summary: Get username through Shibboleth headers
      tags:
        - Users
      description: |
        Retrieves the username of a user authenticated via Shibboleth. Needs the `x-university-id` header
      parameters:
        - in: header
          name: x-university-id
          required: true
          schema:
            type: string
          description: University ID from the Shibboleth authentication headers
      responses:
        '200':
          description: Username successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                example:
                  username: mistahbones
        '400':
          description: Missing required Shibboleth header
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                default:
                  value:
                    message: Missing university ID in headers
        '404':
          description: User not found in system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                default:
                  value:
                    message: User not found
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/users:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPreview'
        500:
          description: Internal Server Error

  /api/users/{id}:
    get:
      summary: Get a user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The user ID
      responses:
        200:
          description: A single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        500:
          description: Internal Server Error or User Not Found

  /api/users/search-username/{username}:
    get:
      summary: Get user by username
      tags:
        - Users
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: The username of the user to retrieve
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/users/search-email/{email}:
    get:
      summary: Get user by email
      tags:
        - Users
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
          description: The RIT email of the user to retrieve
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/users/{id}/account:
    get:
      summary: Get user account (requires authentication)
      tags:
        - Users
      security:
        - shibbolethAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the user
      responses:
        '200':
          description: User account info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          $ref: '#/components/responses/InternalServerError'

# COMPONANTS
components:
  schemas:
    ErrorMessage:
      type: object
      properties:
        message:
          type: string
      example:
        message: Internal Server Error

    JobTitle:
      type: object
      properties:
        titleId:
          type: integer
        label:
          type: string
      example:
        titleId: 1
        label: Full-Stack Developer

    Social:
      type: object
      properties:
        websiteId:
          type: integer
        label:
          type: string

    Skill:
      type: object
      properties:
        skill_id:
          type: integer
        label:
          type: string
        type:
          type: string

    ProjectType:
      type: object
      properties:
        typeId:
          type: integer
        label:
          type: string

    Major:
      type: object
      properties:
        majorId:
          type: integer
        label:
          type: string

    Tag:
      type: object
      properties:
        tagId:
          type: integer
        label:
          type: string
        type:
          type: string

    User:
      type: object
      properties:
        userId:
          type: integer
        username:
          type: string
        ritEmail:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        profileImage:
          type: string
          nullable: true
        headline:
          type: string
          nullable: true
        pronouns:
          type: string
          nullable: true
        jobTitleId:
          type: integer
          nullable: true
        majorId:
          type: integer
          nullable: true
        academic_year:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        funFact:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        visibility:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        phoneNumber:
          type: string
          nullable: true
        universityId:
          type: string
          nullable: true

    UserPreview:
      type: object
      properties:
        userId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        profileImage:
          type: string
          nullable: true
        headline:
          type: string
          nullable: true
        pronouns:
          type: string
          nullable: true
        job_title:
          type: string
          nullable: true
        major:
          type: string
          nullable: true
        academic_year:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        funFact:
          type: string
          nullable: true

    UserDetails:
      type: object
      properties:
        userId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        profileImage:
          type: string
          nullable: true
        headline:
          type: string
          nullable: true
        pronouns:
          type: string
          nullable: true
        job_title:
          type: string
          nullable: true
        major:
          type: string
          nullable: true
        academic_year:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        funFact:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        skills:
          type: array
          nullable: true
          items:
            type: object
            properties:
              id:
                type: integer
              skill:
                type: string
              type:
                type: string
              position:
                type: integer
        socials:
          type: array
          nullable: true
          items:
            type: object
            properties:
              websiteId:
                type: integer
              label:
                type: string

  responses:
    InternalServerError:
      description: An internal server error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            default:
              value:
                message: Internal Server Error
