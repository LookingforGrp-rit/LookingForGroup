openapi: 3.0.3
info:
  title: Looking For Group API
  version: 1.0.0
  description: |
    LFG API Documentation. This will showcase all the endpoints available and how to use them.
    Note: When accessed directly from the express app, the endpoints will have an additional "/api" prefix.
    Because of this, please use the vite proxy when reviewing the docs.
paths:
  # DATASETS
  /api/datasets/roles:
    get:
      summary: Returns a list of all roles
      tags:
        - Datasets
      responses:
        '200':
          description: List of all the roles available
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
              examples:
                default:
                  summary: Example job titles list
                  value:
                    status: 200
                    error: null
                    data:
                      - titleId: 1
                        label: Full-Stack Developer
                      - titleId: 2
                        label: Front-End Developer
                      - titleId: 3
                        label: Back-End Developer
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/datasets/socials:
    get:
      summary: Receives list of all socials
      tags:
        - Datasets
      responses:
        '200':
          description: A list of social platforms
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Social'
              examples:
                default:
                  summary: Example socials list
                  value:
                    status: 200
                    error: null
                    data:
                      - websiteId: 1
                        label: Instagram
                      - websiteId: 2
                        label: Twitter
                      - websiteId: 3
                        label: Facebook
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/datasets/skills:
    get:
      summary: Receives list of all skills
      tags:
        - Datasets
      responses:
        '200':
          description: A list of skills
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Skill'
              examples:
                default:
                  summary: Example skill list
                  value:
                    status: 200
                    error: null
                    data:
                      - skillId: 1
                        label: C++
                        type: Developer
                      - skillId: 2
                        label: CSS
                        type: Developer
                      - skillId: 3
                        label: C#
                        type: Developer
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/datasets/mediums:
    get:
      summary: Receives list of all mediums
      tags:
        - Datasets
      responses:
        '200':
          description: A list of mediums
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Medium'
              examples:
                default:
                  summary: Example project types list
                  value:
                    status: 200
                    error: null
                    data:
                      - typeId: 1
                        label: Video Game
                      - typeId: 2
                        label: Analog Game
                      - typeId: 3
                        label: Mobile Application
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/datasets/majors:
    get:
      summary: Receives list of all majors
      tags:
        - Datasets
      responses:
        '200':
          description: A list of majors
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Major'
              examples:
                default:
                  summary: Examples majors list
                  value:
                    status: 200
                    error: null
                    data:
                      - majorId: 1
                        label: Animation
                      - majorId: 2
                        label: Computer Engineering
                      - majorId: 3
                        label: Computing Engineering Technology
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/datasets/tags:
    get:
      summary: Receives list of all tags
      tags:
        - Datasets
      responses:
        '200':
          description: A list of tags
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tag'
              examples:
                default:
                  summary: Example tags list
                  value:
                    status: 200
                    error: null
                    data:
                      - tagId: 1
                        label: Indie
                        type: Creative
                      - tagId: 2
                        label: Abstract
                        type: Creative
                      - tagId: 3
                        label: Horror
                        type: Creative
        '500':
          $ref: '#/components/responses/InternalServerError'

  # USERS
  /api/users:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserDetails'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: User01
      parameters:
        - in: query
          name: devFirstName
          required: false
          schema:
            type: string
          description: The first name to be used as the current first name
        - in: query
          name: devLastName
          required: false
          schema:
            type: string
          description: The last name to be used as the current last name
        - in: query
          name: devEmail
          required: false
          schema:
            type: string
          description: The email to be used as the current email
        - in: query
          name: devUID
          required: false
          schema:
            type: string
          description: The UID to be used as the current UID
      security:
        shibbolethAuth: []
      responses:
        '201':
          description: User Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 201
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        username:
                          type: string
                          example: User01
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/users/{id}:
    get:
      summary: Get a user by their ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the user to retrieve
      responses:
        '200':
          description: User found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    $ref: '#/components/schemas/UserPreview'

  /api/users/search-username/{username}:
    get:
      summary: Get user by username
      tags:
        - Users
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: The username of the user to retrieve
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    $ref: '#/components/schemas/UserPreview'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/users/search-email/{email}:
    get:
      summary: Get user by email
      tags:
        - Users
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
          description: The RIT email of the user to retrieve
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    $ref: '#/components/schemas/UserPreview'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/users/{id}/projects:
    get:
      summary: Get another user's projects
      description: Retrieve projects of a user (not current user)
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of projects for the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProjectWithFollowers'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/users/{id}/followings/projects:
    get:
      summary: Get projects a user is following
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of projects the user is following
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProjectWithFollowers'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/users/{id}/followings/people:
    get:
      tags:
        - Users
      summary: Get list of users that the specified user is following
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of users the current user is following
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: integer
                          example: 1
                        followingId:
                          type: integer
                          example: 2
                        followedAt:
                          type: string
                          format: date-time
                          example: 2025-05-01T10:00:00Z
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/users/{id}/followers:
    get:
      tags:
        - Users
      summary: Get list of users that are following the specified user
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of users following the current user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: integer
                          example: 1
                        followingId:
                          type: integer
                          example: 2
                        followedAt:
                          type: string
                          format: date-time
                          example: 2025-05-01T10:00:00Z
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  # ME
  /api/me:
    get:
      summary: Gets the current user by ID
      tags:
        - Me
      security:
        - shibbolethAuth: []
      parameters:
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      responses:
        '200':
          description: A single user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    $ref: '#/components/schemas/UserDetails'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Updates user profile information
      tags:
        - Me
      x-middleware:
        - injectCurrentUser
      security:
        - shibbolethAuth: []
      parameters:
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreateInput'

      responses:
        '200':
          description: Update a single user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    $ref: '#/components/schemas/UserDetails'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a user by ID
      tags:
        - Me
      security:
        - shibbolethAuth: []
      parameters:
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      responses:
        '200':
          description: User successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: string
                    example: User deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/me/get-username:
    get:
      summary: Get username through Shibboleth headers
      tags:
        - Me
      security:
        - shibbolethAuth: []
      description: |
        Retrieves the username of the current user authenticated via Shibboleth. Needs the uid header
      parameters:
        - in: header
          name: uid
          required: true
          schema:
            type: string
          description: University ID from the Shibboleth authentication headers
      responses:
        '200':
          description: Username successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: object
                    properties:
                      username:
                        type: string
                      userId:
                        type: integer
              examples:
                default:
                  summary: Example response
                  value:
                    status: 200
                    error: null
                    data:
                      username: mistahbones
                      userId: 18
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/me/projects:
    get:
      summary: Get current user's own projects
      description: Returns the list of projects owned by the user identified by userID.
      tags:
        - Me
      security:
        - shibbolethAuth: []
      parameters:
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      responses:
        '200':
          description: List of projects owned by the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProjectWithFollowers'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/me/socials:
    get:
      summary: Get current user's socials
      description: Returns the list of socials associated with the current user
      tags:
        - Me
      security:
        - shibbolethAuth: []
      parameters:
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      responses:
        '200':
          description: List of socials the current user has
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserSocial'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Adds a user social
      description: Adds a specified social to the current user
      security:
        - shibbolethAuth: []
      tags:
        - Me
      parameters:
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialCreateInput'
      responses:
        '200':
          description: Social created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: object
                    $ref: '#/components/schemas/UserSocial'

        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/me/socials/{websiteId}:
    put:
      summary: Updates a user social
      description: Updates one of the socials specified by the current user
      security:
        - shibbolethAuth: []
      tags:
        - Me
      parameters:
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialCreateInput'
      responses:
        '200':
          description: Social created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSocial'
              example:
                status: 201
                error: null
                data:
                  userId: 1
                  projectId: 2
                  followedAt: '2025-07-16T12:34:56Z'

        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete one of the current user's socials
      security:
        - shibbolethAuth: []
      tags:
        - Me
      parameters:
        - name: websiteId
          in: path
          required: true
          description: ID of the social to be deleted
          schema:
            type: integer
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      responses:
        '200':
          description: Social deleted successfully
          content:
            application/json:
              example:
                status: 200
                error: null
                data: null

        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/me/skills:
    get:
      summary: Get current user's skills
      description: Returns the list of skills associated with the current user
      tags:
        - Me
      security:
        - shibbolethAuth: []
      parameters:
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      responses:
        '200':
          description: List of skills the current user has
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserSkill'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Adds multiple user skills
      description: Adds a specified skill to the current user
      security:
        - shibbolethAuth: []
      tags:
        - Me
      parameters:
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SkillCreateInput'
      responses:
        '200':
          description: Skill created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: object
                    $ref: '#/components/schemas/UserSkill'

        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/me/skills/{id}:
    patch:
      summary: Updates a user skill
      description: Updates all of the skills specified for the current user
      security:
        - shibbolethAuth: []
      tags:
        - Me
      parameters:
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillCreateInput'
      responses:
        '200':
          description: Skill updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSkill'

        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete many of the current user's skills
      security:
        - shibbolethAuth: []
      tags:
        - Me
      parameters:
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                skillIds:
                  type: array
                  items:
                    type: integer
      responses:
        '200':
          description: Skills deleted successfully
          content:
            application/json:
              example:
                status: 200
                error: null
                data: null
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/me/followings/projects/{id}:
    post:
      summary: Follow a project
      security:
        - shibbolethAuth: []
      tags:
        - Me
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the project to follow
          schema:
            type: integer
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      responses:
        '201':
          description: Project followed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectFollowingsResponse'
              example:
                status: 201
                error: null
                data:
                  userId: 1
                  projectId: 2
                  followedAt: '2025-07-16T12:34:56Z'

        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Unfollow a project
      security:
        - shibbolethAuth: []
      tags:
        - Me
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the project to unfollow
          schema:
            type: integer
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      responses:
        '200':
          description: Project unfollowed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectFollowingsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/me/followings/people/{id}:
    post:
      summary: Follow another user
      security:
        - shibbolethAuth: []
      tags:
        - Me
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to be followed
          schema:
            type: integer
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      responses:
        '201':
          description: User followed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFollowingsResponse'
              example:
                status: 201
                error: null
                data:
                  userId: 1
                  followingId: 2
                  followedAt: '2025-07-16T12:34:56Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Unfollow a user
      security:
        - shibbolethAuth: []
      tags:
        - Me
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to be unfollowed
          schema:
            type: integer
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      responses:
        '200':
          description: User unfollowed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFollowingsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # PROJECTS
  /api/projects:
    get:
      summary: Get all projects
      tags:
        - Projects
      description: Retrieves a list of all projects.
      responses:
        '200':
          description: A list of projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProjectWithFollowers'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new project
      description: Creates a new project using the request body
      tags:
        - Projects
      security:
        - shibbolethAuth: []
      parameters:
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectsCreateInput'
      responses:
        '200':
          description: Project created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    $ref: '#/components/schemas/ProjectWithFollowers'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/projects/{id}:
    get:
      summary: Get project by ID
      tags:
        - Projects
      description: Gets information about a single project by its project ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Project ID
      responses:
        '200':
          description: Project found and returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    $ref: '#/components/schemas/ProjectWithFollowers'
        '400':
          $ref: '#/components/responses/BadRequest'

        '404':
          $ref: '#/components/responses/NotFound'

        '500':
          $ref: '#/components/responses/InternalServerError'

    patch:
      summary: Updates project information
      tags:
        - Projects
      security:
        - shibbolethAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The project ID
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectsUpdateInput'

      responses:
        '200':
          description: Update a single project
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    $ref: '#/components/schemas/ProjectDetails'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete a project by ID
      description: Deletes a project by its ID.
      tags:
        - Projects
      security:
        - shibbolethAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the project to delete
          schema:
            type: integer
        - name: devId
          in: query
          required: false
          description: The ID to be used as the current user
          schema:
            type: integer
      responses:
        '200':
          description: Project deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: object
                    properties:
                      id:
                        type: string
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/projects/{id}/images:
    get:
      summary: Get project pictures by ID
      tags:
        - Projects
      description: |
        Gets all images that are with a specific project by the project ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Project ID
      responses:
        '200':
          description: A list of images with the project
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProjectImage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Add a new picture to a project
      description: Creates a new picture entry associated with a specific project.
      tags:
        - Projects
      security:
        - shibbolethAuth: []
      parameters:
        - name: id
          in: path
          description: The ID of the project to add a picture to
          required: true
          schema:
            type: integer
            example: 42
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                altText:
                  type: string
      responses:
        '200':
          description: Picture added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: object
                    properties:
                      imageId:
                        type: integer
                        example: 12
                      projectId:
                        type: integer
                        example: 1
                      image:
                        type: string
                        format: uri
                        example: https://example.com/image.jpg
                      altText:
                        type: string
                        example: Screenshot of the project UI
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/projects/{id}/images/{imageId}:
    put:
      summary: Update a pictures for a project
      description: Updates fields of an existing project picture by image ID.
      tags:
        - Projects
      security:
        - shibbolethAuth: []
      parameters:
        - name: id
          in: path
          description: The ID of the project
          required: true
          schema:
            type: integer
            example: 1
        - name: imageId
          in: path
          description: ID of the picture to update
          required: true
          schema:
            type: integer
            example: 1
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                altText:
                  type: string
                isThumbnail:
                  type: boolean
                  description: Whether this image should be set as the project thumbnail
                  example: false
      responses:
        '200':
          description: Image updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Remove a picture from a project
      tags:
        - Projects
      description: Removes a picture from a project by picture ID
      security:
        - shibbolethAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Project ID
        - name: imageId
          in: path
          required: true
          schema:
            type: integer
          description: Picture ID to remove
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      responses:
        '200':
          description: Picture removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    example: null
                  data:
                    type: object
                    properties:
                      imageId:
                        type: integer
                        example: 1
                      image:
                        type: string
                        example: string
                      altText:
                        type: string
                        example: string
                      position:
                        type: integer
                        position: integer
                      projectId:
                        type: integer
                        position: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/projects/{id}/members:
    post:
      summary: Add a member to a project
      tags:
        - Projects
      security:
        - shibbolethAuth: []
      description: Adds a new member to a project using the project ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Project ID to add the member to
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - roleId
              properties:
                userId:
                  type: integer
                  description: The ID of the user to add
                  example: 1
                roleId:
                  type: integer
                  description: The ID of the role of the user in the project
                  example: 3
      responses:
        '200':
          description: Member added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 5
                      userId:
                        type: integer
                        example: 1
                      projectId:
                        type: integer
                        example: 1
                      roleId:
                        type: integer
                        example: 76
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/projects/{id}/members/{userId}:
    put:
      summary: Update a member in a project
      security:
        - shibbolethAuth: []
      tags:
        - Projects
      description: Updates the role or other properties of a member in a project.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Project ID
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: The ID of the member to update
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roleId
              properties:
                roleId:
                  type: integer
                  description: Updated ID of the role for the user
                  example: 9
      responses:
        '200':
          description: Member updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: object
                    properties:
                      userId:
                        type: integer
                        example: 1
                      roleId:
                        type: integer
                        example: 76
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Remove a member from a project
      tags:
        - Projects
      description: Deletes a member from a project by specifying the user ID in the query parameters.
      security:
        - shibbolethAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Project ID
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: The ID of the user to remove
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      responses:
        '200':
          description: Member removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: string
                    example: Member removed
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/projects/{id}/socials:
    get:
      summary: Get a project's socials
      description: Returns the list of socials associated with the specified project
      tags:
        - Projects
      security:
        - shibbolethAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the project
      responses:
        '200':
          description: List of socials the current project has
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProjectSocial'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Adds a project social
      description: Adds a specified social to the current project
      security:
        - shibbolethAuth: []
      tags:
        - Projects
      parameters:
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialCreateInput'
      responses:
        '200':
          description: Social created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: object
                    $ref: '#/components/schemas/ProjectSocial'

        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/projects/{id}/socials/{websiteId}:
    put:
      summary: Updates a project social
      description: Updates one of the project socials specified
      security:
        - shibbolethAuth: []
      tags:
        - Projects
      parameters:
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialCreateInput'
      responses:
        '200':
          description: Social created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSocial'
              example:
                status: 201
                error: null
                data:
                  userId: 1
                  projectId: 2
                  followedAt: '2025-07-16T12:34:56Z'

        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete one of the specified project's socials
      security:
        - shibbolethAuth: []
      tags:
        - Projects
      parameters:
        - name: websiteId
          in: path
          required: true
          description: ID of the social to be deleted
          schema:
            type: integer
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the project
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      responses:
        '200':
          description: Social deleted successfully
          content:
            application/json:
              example:
                status: 200
                error: null
                data: null

        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/projects/{id}/tags:
    get:
      summary: Get a project's tags
      description: Returns the list of tags associated with the specified project
      tags:
        - Projects
      security:
        - shibbolethAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the project
      responses:
        '200':
          description: List of tags the current project has
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tag'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Adds multiple project tags
      description: Adds an amount of tags to the specified project
      security:
        - shibbolethAuth: []
      tags:
        - Projects
      parameters:
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tagIds:
                  type: array
                  items:
                    type: integer
      responses:
        '200':
          description: Tags created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: object
                    $ref: '#/components/schemas/Tag'

        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Deletes many of the specified project's tags
      security:
        - shibbolethAuth: []
      tags:
        - Projects
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the project
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tagIds:
                  type: array
                  items:
                    type: integer
      responses:
        '200':
          description: Tags deleted successfully
          content:
            application/json:
              example:
                status: 200
                error: null
                data: null

        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/projects/{id}/mediums:
    get:
      summary: Get a project's mediums
      description: Returns the list of mediums associated with the specified project
      tags:
        - Projects
      security:
        - shibbolethAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the project
      responses:
        '200':
          description: List of mediums the current project has
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Medium'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Adds multiple project mediums
      description: Adds an amount of mediums to the specified project
      security:
        - shibbolethAuth: []
      tags:
        - Projects
      parameters:
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mediumIds:
                  type: array
                  items:
                    type: integer

      responses:
        '200':
          description: Mediums created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: object
                    $ref: '#/components/schemas/Tag'

        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Deletes many of the specified project's mediums
      security:
        - shibbolethAuth: []
      tags:
        - Projects
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the project
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mediumIds:
                  type: array
                  items:
                    type: integer
      responses:
        '200':
          description: Tags deleted successfully
          content:
            application/json:
              example:
                status: 200
                error: null
                data: null

        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/projects/{id}/images/reorder:
    put:
      summary: Reorders the images in a project
      description: Takes the IDs of a project's images and reorders them in the specified project
      security:
        - shibbolethAuth: []
      tags:
        - Projects
      parameters:
        - in: query
          name: devId
          schema:
            type: integer
          required: false
          description: The user ID to be used as the current user
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                imageOrder:
                  type: array
                  items:
                    type: integer
      responses:
        '200':
          description: Images reordered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  error:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProjectImage'

        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # IMAGES
  /api/images/{image}:
    get:
      summary: Gets an image by file name
      tags:
        - Images
      description: Retrieves an image from the database by its unique file name.
      parameters:
        - in: path
          name: image
          required: true
          schema:
            type: string
          description: Image URL
      responses:
        '200':
          description: Image found
          content:
            image/png:
              type: string
              format: binary
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
# COMPONENTS
components:
  securitySchemes:
    shibbolethAuth:
      #Filler values need to be changed
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Role:
      type: object
      properties:
        roleId:
          type: integer
        label:
          type: string
      example:
        roleId: 1
        label: Full-Stack Developer

    Social:
      type: object
      properties:
        websiteId:
          type: integer
        label:
          type: string

    UserSocial:
      type: object
      properties:
        apiUrl:
          type: string
        url:
          type: string
        label:
          type: string
        websiteId:
          type: integer

    ProjectSocial:
      type: object
      properties:
        websiteId:
          type: integer
        projectId:
          type: integer
        url:
          type: string

    SocialCreateInput:
      type: object
      properties:
        websiteId:
          type: integer
        url:
          type: string

    Skill:
      type: object
      properties:
        skillId:
          type: integer
        label:
          type: string
        type:
          type: string

    UserSkill:
      type: object
      properties:
        apiUrl:
          type: string
        proficiency:
          type: string
        position:
          type: integer
        skillId:
          type: integer
        label:
          type: string
        type:
          type: string

    SkillCreateInput:
      type: object
      properties:
        skillId:
          type: integer
        position:
          type: integer
        proficiency:
          type: string

    ProjectDetails:
      type: string

    Medium:
      type: object
      properties:
        typeId:
          type: integer
        label:
          type: string

    Major:
      type: object
      properties:
        majorId:
          type: integer
        label:
          type: string

    Tag:
      type: object
      properties:
        tagId:
          type: integer
        label:
          type: string
        type:
          type: string

    User:
      type: object
      properties:
        userId:
          type: integer
        username:
          type: string
        ritEmail:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        profileImage:
          type: string
          nullable: true
        headline:
          type: string
          nullable: true
        pronouns:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        majorId:
          type: integer
          nullable: true
        academicYear:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        funFact:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        visibility:
          type: integer
        skills:
          type: array
          nullable: true
          items:
            type: object
            properties:
              id:
                type: integer
              skill:
                type: string
              type:
                type: string
              position:
                type: integer
        socials:
          type: array
          nullable: true
          items:
            type: object
            properties:
              websiteId:
                type: integer
              label:
                type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        phoneNumber:
          type: string
          nullable: true
        universityId:
          type: string
          nullable: true

    UserDetails:
      type: object
      properties:
        userId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        profileImage:
          type: string
          nullable: true
        headline:
          type: string
          nullable: true
        pronouns:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        major:
          type: string
          nullable: true
        academicYear:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        funFact:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        skills:
          type: array
          nullable: true
          items:
            type: object
            properties:
              id:
                type: integer
              skill:
                type: string
              type:
                type: string
              position:
                type: integer
        socials:
          type: array
          nullable: true
          items:
            type: object
            properties:
              websiteId:
                type: integer
              label:
                type: string

    UserPreview:
      type: object
      properties:
        userId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        profileImage:
          type: string
          nullable: true

    UserCreateInput:
      type: object
      properties:
        profileImage:
          type: string
          format: binary
        firstName:
          type: string
        lastName:
          type: string
        headline:
          type: string
        pronouns:
          type: string
        title:
          type: string
        academicYear:
          type: string
          enum: [Freshman, Sophmore, Junior, Senior, Grad1, Grad2]
        location:
          type: string
        funFact:
          type: string
        bio:
          type: string

    ProjectWithFollowers:
      type: object
      properties:
        projectId:
          type: integer
        title:
          type: string
        hook:
          type: string
        description:
          type: string
        thumbnail:
          type: string
          nullable: true
        purpose:
          type: string
          nullable: true
        status:
          type: string
        audience:
          type: string
          nullable: true
        userId:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        _count:
          type: object
          properties:
            projectFollowings:
              type: integer
        mediums:
          type: array
          items:
            type: object
            properties:
              projectId:
                type: integer
              typeId:
                type: integer
              genres:
                type: object
                properties:
                  typeId:
                    type: integer
                  label:
                    type: string
        projectTags:
          type: array
          items:
            type: object
            properties:
              projectId:
                type: integer
              tagId:
                type: integer
              position:
                type: integer
              type:
                type: string
              label:
                type: string
        projectImages:
          type: array
          items:
            type: object
            properties:
              imageId:
                type: integer
              image:
                type: string
              altText:
                type: string
        projectSocials:
          type: array
          items:
            type: object
            additionalProperties: true
        jobs:
          type: array
          items:
            type: object
            properties:
              projectId:
                type: integer
              titleId:
                type: integer
              availability:
                type: string
              duration:
                type: string
              location:
                type: string
              compensation:
                type: string
              description:
                type: string
              createdAt:
                type: string
                format: date-time
              updatedAt:
                type: string
                format: date-time
        members:
          type: array
          items:
            type: object
            properties:
              projectId:
                type: integer
              userId:
                type: integer
              titleId:
                type: integer
              permission:
                type: integer
        users:
          type: object
          nullable: true
          properties:
            userId:
              type: integer
            username:
              type: string
            ritEmail:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            profileImage:
              type: string
            headline:
              type: string
            pronouns:
              type: string
            title:
              type: string
            majorId:
              type: integer
            academicYear:
              type: string
            location:
              type: string
            funFact:
              type: string
              nullable: true
            bio:
              type: string
            visibility:
              type: integer
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
            phoneNumber:
              type: string
              nullable: true
            universityId:
              type: integer
              nullable: true
        Medium:
          type: array
          items:
            type: object
            properties:
              typeId:
                type: integer
              label:
                type: string
        followers:
          type: object
          properties:
            count:
              type: integer

    ProjectsCreateInput:
      type: object
      required:
        - title
        - hook
        - description
        - status
      properties:
        title:
          type: string
          maxLength: 150
        hook:
          type: string
          maxLength: 200
        description:
          type: string
          maxLength: 2000
        thumbnail:
          type: string
          format: binary
          nullable: true
        purpose:
          type: string
          enum: [Personal, PortfolioPiece, Academic, CoOp]
        status:
          type: string
          enum: [Planning, Development, PostProduction, Complete]
        audience:
          type: string
          maxLength: 300
          nullable: true

    ProjectsUpdateInput:
      type: object
      properties:
        title:
          type: string
          maxLength: 150
        hook:
          type: string
          maxLength: 200
        description:
          type: string
          maxLength: 2000
        thumbnail:
          type: string
          format: binary
          nullable: true
        purpose:
          type: string
          enum: [Personal, PortfolioPiece, Academic, CoOp]
        status:
          type: string
          enum: [Planning, Development, PostProduction, Complete]
        audience:
          type: string
          maxLength: 300
          nullable: true

    ProjectImage:
      type: object
      properties:
        imageId:
          type: integer
        url:
          type: string
        altText:
          type: string
      example:
        imageId: 2
        url: http://LGF.com/images/project-101.png
        altText: Picture

    ProjectFollowingsResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        error:
          type: string
          nullable: true
          example: null
        data:
          type: object
          properties:
            userId:
              type: integer
              example: 1
            projectId:
              type: integer
              example: 42
            followedAt:
              type: string
              format: date-time
              example: 2025-07-16T12:34:56Z

    UserFollowingsResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        error:
          type: string
          nullable: true
          example: null
        data:
          type: object
          properties:
            userId:
              type: integer
              example: 1
            followingId:
              type: integer
              example: 2
            followedAt:
              type: string
              format: date-time
              example: 2025-07-16T12:34:56Z

    ErrorMessage:
      type: object
      properties:
        status:
          type: integer
          example: 500
        error:
          type: string
          example: Internal Server Error
        data:
          type: string
          nullable: true
          example: null
      required:
        - status
        - error
        - data

  responses:
    InternalServerError:
      description: An internal server error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            default:
              value:
                status: 500
                error: Internal Server Error
                data: null
    BadRequest:
      description: The request was invalid (e.g., malformed parameters)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            default:
              value:
                status: 400
                error: Invalid parameter(s)
                data: null
    NotFound:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            default:
              value:
                status: 404
                error: Not found
                data: null
    Unauthorized:
      description: Authentication is required and has failed or has not been provided
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            default:
              value:
                status: 401
                error: Unauthorized
                data: null
    Conflict:
      description: Conflict to show resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            default:
              value:
                status: 409
                error: Resource already exists
                data: null
